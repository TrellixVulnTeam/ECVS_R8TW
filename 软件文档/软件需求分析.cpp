
1.图像算法: 需要以图像作为输入，其中每一个图像算法内部包含任意多种其它的图像预处理功能
模板：
{
	输入：图像、偏移(X,Y,Theta)
	输出：list(X、Y、Theta)

}

图像预处理(模糊、二值化、Open、Closing之类的)
{
	输入:图像
	输出:图像
}

找直线
{
	输入:图像,偏移(X,Y,Theta)
	输出:直线的两点坐标
}


找圆
{
	输入:图像,偏移(X，Y,Theta)
	输出: 圆心和半径
}
找矩形
{
	输入:图像,偏移(X，Y,Theta)
	输出: 矩形四个点
}


2.数学计算算法
各种计算方法

3.逻辑控制(if for)

4.插件的支持  插件的接口确定

5.图像的输入（CCD、文件夹等..）


6.软件需要有调试功能，能支持单步调试，即每次只执行一步，这样就能很好的观察每一步发生了什么
  还能跳入到算法内部调试，如模板本身包含N个(N >= 0)其它的预处理算法,要求能看到模板里面每一步之后的处理结果


7.要有完整的日志系统


8. 能支持代码工具，即集成一个解释器，每一个解释器对象也是相当于一个算法，这样的好处是当一个逻辑功能相当复杂时算法工具已经
   无法实现功能时，可以通过解释器来完成功能。(Lua或Python,首先Python 因为Python功能强大)，与插件功能有点类似，但是插件功能关注的是数据处理算法，
   代码工具关注的是逻辑流程方面( 通过软件本身提供的工具 + 插件功能 + 解释器工具 可以实现标准+定制的功能，
   	定制功能通过插件和代码工具实现)


10.代码风格：
   1) 将所有的源程序托管到GitHub上面,主张开源，时间精力能力有限希望能吸引一些人参与进来
   2）由于使用VC作为开发环境，建议使用匈牙利命名法
   3）没声明一个变量，不管是不是临时变量都需要注释，说明该变量是干什么用的
   4）函数必须注释，功能、参数、返回值
   5）循环语句也必须注释
   6）当牵扯到数学公式时，最好把数学公式也列出来或者给出参考链接
   7) 上层界面和底层功能必须分开成不同的模块，
   8) 每种算法只有输入输出数据是对外开放的，其它的都为私有,设置或创建的用户界面都由算法自己提供
   9) 每一次的代码提交都必须提交代码增加的功能，以及增加的函数、类的详细说明，如果增加了全局变量，全局变量也需要说明   
  10) 函数类以及全局变量的注释，必须包含编写者的大名以及时间，如果是对以前代码修改，也必须加上修改了什么、时间、人物
  11) 提交的每一行代码都要经过精雕细琢......
11.目前亟需解决的问题：
   1) 整个系统的结构组织，逻辑流程执行的数据交互
      对于数据交互性问题，采用一个变量结构来解决类似编译器里面的变量的处理
      
      enum Type
      {
        Image,
        Int,
        Double,
        String,
        Point,
        Point2F，  
        IntList,
        DoubleList,
        ImageList,
        StringList，
        List<Point>
        List<Point2F>  //只支持到point2F 再复杂的结构需要算法本身用这些字段去组织
      }
      class  InputOutputInfo
      {
        //类型
          Type valueType;
          //用来保存每个类型的值
          int m_nValue;
          double m_dbValue;
          string m_strValue;
          ....

          string m_strInfo; //该字段说明性文字

          //获取返回值
          bool GetIntValue(int &value);
          bool GetImageValue(cv::Mat& matValue);
          bool GetDoubleValue(double &dbValue);
          bool GetStringValue(string& strValue);
          .....



          void  SetInfo(string strInfo); //设置说明文字
          string GetInfo();  //该函数用于返回该字段的说明性文字，由具体算法设置


      };
      其中每个算法或工具的输入输出都是InputOutputInfo的Vector，具体有几个输入输出参数由算法本身决定，这样实现应该可以解决1、2问题，只是流程实现会稍微麻烦，且算法本身需要做一些工作。

   2) 可扩展性，由于不知道以后需要加入什么功能，而且加入功能的输入输出可能也是未知的，所以在不改变原来程序的情况下把新的功能加进来
       

   3) 代码的组织，分工合作，编写时对公用代码的共同修改的冲突问题，最主要的是同时需要功能A,同时编写了一样的或者不同的公共接口函数，但实现方法不同
       为了解决该问题，首先上传的代码必须先经过测试，其次上传时需要上传函数的详细说明，如果遇到功能一样的函数后提交的必须和先提交的人讨论，该使用谁的实现即什么样的接口



